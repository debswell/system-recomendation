# -*- coding: utf-8 -*-
"""Content_Based Filtering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xxp0D4YOe10Rfo67yCPqh1YTiONnNakk

# Data Understanding
"""

from google.colab import files
import zipfile

# Mengupload file zip
uploaded = files.upload()

# Ekstrak file zip
with zipfile.ZipFile('Wisata_Indonesia.zip', 'r') as zip_ref:
    zip_ref.extractall('Wisata_Indonesia')

"""**Penjelasan Singkat**

Kode tersebut digunakan untuk:
1. Mengunggah file ZIP ke Google Colab.
2. Mengekstrak isi file ZIP ke folder `Wisata_Indonesia`.
"""

#Loading Data
import pandas as pd
import numpy as np

# Load semua file CSV
package_tourism = pd.read_csv('/content/Wisata_Indonesia/package_tourism.csv')
tourism_rating = pd.read_csv('/content/Wisata_Indonesia/tourism_rating.csv')
tourism_with_id = pd.read_csv('/content/Wisata_Indonesia/tourism_with_id.csv')
user = pd.read_csv('/content/Wisata_Indonesia/user.csv')

"""**Penjelasan Singkat**

Kode ini digunakan untuk memuat (load) data dari empat file CSV ke dalam variabel DataFrame menggunakan library `pandas`. File yang dimuat adalah:

- `package_tourism.csv`
- `tourism_rating.csv`
- `tourism_with_id.csv`
- `user.csv`

"""

# Informasi dasar dataset
datasets = {
    "Package Tourism": package_tourism,
    "Tourism Rating": tourism_rating,
    "Tourism with ID": tourism_with_id,
    "User Data": user
}

for name, data in datasets.items():
    print(f"\n ## {name}:")
    print(f"- Jumlah Data: {len(data)}")
    print(f"- Kolom: {list(data.columns)}")
    print(f"- Contoh Data:\n{data.head(2)}")
    print(f"- Missing Values:\n{data.isnull().sum()}")

"""**Penjelasan Singkat**

Kode ini memberikan informasi dasar dari setiap dataset, seperti:

- Jumlah baris data
- Nama-nama kolom
- Contoh 2 data teratas
- Jumlah missing values di setiap kolom

Semua dilakukan untuk 4 dataset: `Package Tourism`, `Tourism Rating`, `Tourism with ID`, dan `User Data`.

# Eksplorasi Data Analisis
"""

# 1. Package Tourism
print("\n1.PACKAGE TOURISM DATASET")
print("=" * 40)
print("Info Dataset:")
print(package_tourism.info())
print("\nSample Data:")
print(package_tourism.head())
print("\nStatistik Deskriptif:")
print(package_tourism.describe())

# Check missing values
print("\nMissing Values:")
missing_package = package_tourism.isnull().sum()
print(missing_package[missing_package > 0])

"""**Analisis Dataset: Package Tourism**

- Menampilkan informasi umum (`info()`) seperti jumlah data, tipe data, dan kolom.
- Menampilkan 5 data teratas (`head()`).
- Menampilkan statistik deskriptif (`describe()`) untuk kolom numerik.
- Mengecek jumlah nilai yang hilang (`isnull().sum()`) dan hanya menampilkan kolom yang memiliki missing values.

"""

# 2. Tourism Rating
print("\n2 TOURISM RATING DATASET")
print("=" * 40)
print("Info Dataset:")
print(tourism_rating.info())
print("\nSample Data:")
print(tourism_rating.head())
print("\nStatistik Deskriptif:")
print(tourism_rating.describe())

# Check missing values
print("\nMissing Values:")
missing_rating = tourism_rating.isnull().sum()
print(missing_rating[missing_rating > 0])

"""**Analisis Dataset: Tourism Rating**

- Menampilkan struktur dan tipe data pada dataset (`info()`).
- Menampilkan 5 data teratas sebagai sampel (`head()`).
- Menampilkan statistik deskriptif untuk kolom numerik (`describe()`).
- Mengecek dan menampilkan kolom yang memiliki missing values (`isnull().sum()`).

"""

#3. Tourism with ID
print("\n3 TOURISM WITH ID DATASET")
print("=" * 40)
print("Info Dataset:")
print(tourism_with_id.info())
print("\nSample Data:")
print(tourism_with_id.head())
print("\nStatistik Deskriptif:")
print(tourism_with_id.describe(include='all'))

# Check missing values
print("\nMissing Values:")
missing_tourism = tourism_with_id.isnull().sum()
print(missing_tourism[missing_tourism > 0])

"""**Analisis Dataset: Tourism with ID**

- Menampilkan info struktur dan tipe data dataset (`info()`).
- Menampilkan contoh data awal (`head()`).
- Menampilkan statistik deskriptif lengkap untuk semua kolom, termasuk kategori (`describe(include='all')`).
- Mengecek dan menampilkan kolom yang memiliki nilai kosong/missing (`isnull().sum()`).

"""

#4. User Dataset
print("\n4 USER DATASET")
print("=" * 40)
print("Info Dataset:")
print(user.info())
print("\nSample Data:")
print(user.head())
print("\nStatistik Deskriptif:")
print(user.describe(include='all'))

# Check missing values
print("\nMissing Values:")
missing_user = user.isnull().sum()
print(missing_user[missing_user > 0])

"""**Analisis Dataset: User**

- Menampilkan info struktur dan tipe data dataset (`info()`).
- Menampilkan contoh data awal (`head()`).
- Menampilkan statistik deskriptif lengkap untuk semua kolom (`describe(include='all')`).
- Mengecek dan menampilkan kolom yang memiliki nilai kosong/missing (`isnull().sum()`).

"""

import matplotlib.pyplot as plt
import seaborn as sns

# Distribusi kategori wisata
# Setting untuk visualisasi
plt.style.use('default')
sns.set_palette("husl")
fig_size = (12, 6)
plt.figure(figsize=fig_size)
category_counts = tourism_with_id['Category'].value_counts()
plt.subplot(1, 2, 1)
category_counts.plot(kind='bar', color='skyblue')
plt.title('Distribusi Kategori Wisata')
plt.xlabel('Kategori')
plt.ylabel('Jumlah')
plt.xticks(rotation=45)

"""**Visualisasi Distribusi Kategori Wisata**

- Menggunakan `matplotlib` dan `seaborn` untuk membuat grafik batang distribusi kategori wisata.
- Menampilkan jumlah data tiap kategori wisata dari dataset `tourism_with_id`.
- Tujuan:  
  Memahami proporsi dan sebaran data kategori wisata sebagai dasar analisis lebih lanjut.

"""

# Top 10 kota dengan wisata terbanyak
plt.subplot(1, 2, 2)
city_counts = tourism_with_id['City'].value_counts().head(10)
city_counts.plot(kind='bar', color='lightcoral')
plt.title('Top 10 Kota dengan Wisata Terbanyak')
plt.xlabel('Kota')
plt.ylabel('Jumlah Wisata')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**Top 10 Kota dengan Wisata Terbanyak**

- Visualisasi menggunakan grafik batang untuk 10 kota dengan jumlah tempat wisata terbanyak.
- Menggunakan data dari kolom `City` pada dataset `tourism_with_id`.
- Tujuan:  
  Mengetahui kota-kota dengan konsentrasi objek wisata tertinggi untuk analisis fokus wilayah.

"""

# Distribusi rating
plt.figure(figsize=fig_size)
plt.subplot(1, 2, 1)
tourism_with_id['Rating'].hist(bins=20, color='lightgreen', alpha=0.7)
plt.title('Distribusi Rating Wisata')
plt.xlabel('Rating')
plt.ylabel('Frekuensi')

"""**Distribusi Rating Wisata**

- Visualisasi histogram untuk melihat sebaran nilai rating tempat wisata.
- Data diambil dari kolom `Rating` pada dataset `tourism_with_id`.
- Tujuan:  
  Memahami bagaimana rating wisata tersebar dan mengenali pola kepuasan pengunjung.

"""

# Top 10 tempat wisata berdasarkan rating tertinggi
# gabung tourism_rating dengan tourism_with_id
merged_ratings = pd.merge(
    tourism_rating,
    tourism_with_id[['Place_Id', 'Place_Name']],
    on='Place_Id',
    how='left'
)

# Calculate average ratings per place
top_places = merged_ratings.groupby('Place_Name')['Place_Ratings'] \
    .mean() \
    .sort_values(ascending=False) \
    .head(10)

# Plot
plt.figure(figsize=(10, 6))
top_places.sort_values().plot(kind='barh', color='skyblue')
plt.title('Top 10 tempat wisata berdasarkan rating tertinggi', fontsize=14)
plt.xlabel('Rating')
plt.ylabel('Tempat Wisata')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()

"""**Top 10 Tempat Wisata Berdasarkan Rating Tertinggi**

- Menggabungkan data rating (`tourism_rating`) dengan data tempat wisata (`tourism_with_id`) berdasarkan `Place_Id`.
- Menghitung rata-rata rating untuk setiap tempat wisata.
- Menampilkan 10 tempat wisata dengan rating rata-rata tertinggi dalam bentuk grafik batang horizontal.
- Tujuan:  
  Mengetahui tempat wisata mana yang paling disukai pengunjung berdasarkan rating tertinggi.

"""

# Price analysis
if 'Price' in tourism_with_id.columns:
    plt.subplot(1, 2, 2)
    tourism_with_id['Price'].hist(bins=20, color='gold', alpha=0.7)
    plt.title('Distribusi Harga')
    plt.xlabel('Harga')
    plt.ylabel('Frekuensi')
else:
    plt.subplot(1, 2, 2)
    rating_by_category = tourism_with_id.groupby('Category')['Rating'].mean().sort_values(ascending=False)
    rating_by_category.plot(kind='bar', color='orange')
    plt.title('Rating Rata-rata per Kategori')
    plt.xlabel('Kategori')
    plt.ylabel('Rating Rata-rata')
    plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

"""**Analisis Harga atau Rating per Kategori**

- Jika kolom `Price` ada, tampilkan distribusi harga tempat wisata dalam histogram.
- Jika tidak ada kolom `Price`, tampilkan rata-rata rating berdasarkan kategori wisata dalam bentuk grafik batang.
- Tujuan:  
  Memahami sebaran harga tiket wisata atau melihat kategori wisata mana yang memiliki rating terbaik.

"""

# Distribusi rating yang diberikan user
plt.figure(figsize=fig_size)
plt.subplot(1, 2, 1)
tourism_rating['Place_Ratings'].hist(bins=10, color='purple', alpha=0.7)
plt.title('Distribusi Rating dari User')
plt.xlabel('Rating')
plt.ylabel('Frekuensi')

"""**Distribusi Rating dari User**

- Visualisasi histogram untuk melihat sebaran nilai rating yang diberikan oleh pengguna.
- Tujuan:  
  Memahami pola penilaian pengguna terhadap tempat wisata, apakah cenderung memberikan rating tinggi, rendah, atau bervariasi.

"""

# User yang paling aktif memberikan rating
plt.subplot(1, 2, 2)
user_activity = tourism_rating['User_Id'].value_counts().head(10)
user_activity.plot(kind='bar', color='teal')
plt.title('Top 10 User Paling Aktif')
plt.xlabel('User ID')
plt.ylabel('Jumlah Rating')
plt.tight_layout()
plt.show()

"""**User Paling Aktif Memberikan Rating**

- Visualisasi bar chart untuk 10 user yang paling banyak memberikan rating.
- Tujuan:  
  Mengidentifikasi user yang paling aktif berkontribusi dalam memberikan penilaian, berguna untuk analisis perilaku pengguna atau filtering data.

"""

# Statistik deskriptif
print("\nSTATISTIK DESKRIPTIF:")
print("\nTourism Data:")
print(tourism_with_id.describe())
print("\nRating Data:")
print(tourism_rating.describe())

"""**Statistik Deskriptif**

- Menampilkan ringkasan statistik dasar dari dataset wisata (`tourism_with_id`) dan rating (`tourism_rating`).
- Tujuan:  
  Untuk memahami distribusi, nilai rata-rata, minimum, maksimum, dan variasi data yang ada sebagai dasar analisis lebih lanjut.

"""

# Kategori wisata
plt.figure(figsize=(15, 5))
plt.subplot(1, 2, 1)
if 'Category' in tourism_with_id.columns:
    category_counts = tourism_with_id['Category'].value_counts()
    plt.pie(category_counts.values, labels=category_counts.index, autopct='%1.1f%%')
    plt.title('Distribusi Kategori Wisata')

plt.tight_layout()
plt.show()

"""**Visualisasi Kategori Wisata**

- Membuat diagram pie untuk menunjukkan persentase distribusi kategori wisata.  
- Tujuan: Memahami proporsi masing-masing kategori dalam data wisata secara visual.

"""

#Korelasi Antar Dataset
# Check common columns untuk join
common_cols = []
for name1, df1 in datasets.items():
    for name2, df2 in datasets.items():
        if name1 != name2:
            common = set(df1.columns).intersection(set(df2.columns))
            if common:
                print(f"{name1} & {name2}: {common}")

"""**Korelasi Antar Dataset**

- Memeriksa kolom yang sama (common columns) antar dataset untuk kemungkinan penggabungan (join).  
- Tujuan: Menemukan relasi antar dataset sehingga data bisa digabung dan dianalisis bersama.

"""

#Kualitas Data
def assess_data_quality(df, name):
    print(f"\n{name}:")
    total_cells = df.shape[0] * df.shape[1]
    missing_cells = df.isnull().sum().sum()

    print(f"- Missing Values: {missing_cells}/{total_cells} ({missing_cells/total_cells*100:.2f}%)")
    print(f"- Duplicate Rows: {df.duplicated().sum()}")

    # Check for potential outliers in numeric columns
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    if len(numeric_cols) > 0:
        print(f"- Numeric Columns: {len(numeric_cols)}")
        for col in numeric_cols:
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            outliers = df[(df[col] < Q1 - 1.5*IQR) | (df[col] > Q3 + 1.5*IQR)][col].count()
            if outliers > 0:
                print(f"  - {col}: {outliers} potential outliers")

for name, df in datasets.items():
    assess_data_quality(df, name)

"""**Kualitas Data**

Fungsi `assess_data_quality` digunakan untuk mengevaluasi kualitas data pada setiap dataset dengan:

- Menghitung *missing values* dan persentasenya.
- Menghitung *jumlah baris duplikat*.
- Mendeteksi *potensi outlier* pada kolom numerik menggunakan metode IQR.

**Tujuan:**  
Memastikan data bersih dan layak untuk analisis atau pemodelan lebih lanjut dengan mengetahui masalah yang mungkin ada seperti nilai hilang, data duplikat, dan outlier.

# Data Preprocessing
"""

# Hapus nilai kosong dan duplikat
print("Sebelum Cleaning:")
print(f"- tourism_with_id null:\n{tourism_with_id.isnull().sum()}")
print(f"- tourism_rating null:\n{tourism_rating.isnull().sum()}")

"""**Pengecekan Nilai Kosong Sebelum Pembersihan**

Kode ini menampilkan jumlah nilai kosong (null) pada dataset `tourism_with_id` dan `tourism_rating` sebelum proses pembersihan data.

**Tujuan:**  
Untuk mengetahui berapa banyak data yang hilang agar bisa diputuskan langkah pembersihan selanjutnya, seperti menghapus atau mengisi nilai kosong tersebut.

"""

# Isi missing values di 'Time_Minutes' dengan median
tourism_with_id['Time_Minutes'].fillna(
    tourism_with_id['Time_Minutes'].median(),
    inplace=True
)

"""**Mengisi Nilai Kosong pada Kolom 'Time_Minutes'**

Kode ini mengisi nilai kosong (missing values) di kolom `Time_Minutes` pada dataset `tourism_with_id` dengan nilai median dari kolom tersebut.

**Tujuan:**  
Menghindari hilangnya data dan menjaga distribusi data agar tetap representatif dengan mengganti nilai kosong menggunakan nilai tengah (median).

"""

# Hapus kolom yang tidak digunakan
tourism_with_id_clean = tourism_with_id.drop([
    'Unnamed: 11',
    'Unnamed: 12',
    'Coordinate',
    'Lat',
    'Long'
], axis=1)

"""**Menghapus Kolom yang Tidak Digunakan**

Kode ini menghapus kolom-kolom yang tidak relevan atau tidak diperlukan dalam analisis dari dataset `tourism_with_id`, seperti kolom `Unnamed: 11`, `Unnamed: 12`, dan data koordinat (`Coordinate`, `Lat`, `Long`).

**Tujuan:**  
Menyederhanakan dataset agar lebih fokus dan efisien untuk analisis berikutnya dengan membuang kolom-kolom yang tidak penting.

"""

# Contoh: Ubah "Adventure" menjadi "Alam" jika maksudnya sama
tourism_with_id_clean['Category'] = tourism_with_id_clean['Category'].replace({
    'Adventure': 'Alam',
    'Nature': 'Alam'
})

"""**Konsolidasi Kategori Wisata**

Kode ini mengubah kategori wisata dengan nama berbeda tapi maknanya sama menjadi satu nama yang konsisten, misalnya mengubah "Adventure" dan "Nature" menjadi "Alam".

**Tujuan:**  
Menyatukan kategori yang serupa untuk memudahkan analisis dan visualisasi yang lebih jelas dan terstruktur.

"""

#cek duplikasi data
print(tourism_with_id_clean.duplicated().sum())
print(tourism_rating.duplicated().sum())

"""**Cek Duplikasi Data**

Kode ini menghitung jumlah baris data yang duplikat pada dua dataset: `tourism_with_id_clean` dan `tourism_rating`.

**Tujuan:**  
Mengetahui apakah ada data yang sama persis muncul lebih dari sekali sehingga perlu ditangani agar analisis data lebih akurat dan tidak bias.

"""

#Hapus dupliaksi data pada
tourism_rating = tourism_rating.drop_duplicates()

"""**Hapus Duplikat**

menghapus dat ayang duplikat di file tourism_rating
"""

from sklearn.preprocessing import LabelEncoder

encoders = {}
# Encode 'Category'
category_encoder = LabelEncoder()
encoders['Category_Encoded'] = category_encoder.fit_transform(
    tourism_with_id_clean['Category']
)

# Encode 'City'
city_encoder = LabelEncoder()
encoders['City_Encoded'] = city_encoder.fit_transform(
    tourism_with_id_clean['City']
)

"""**Encoding Kategori dan Kota dengan LabelEncoder**

Kode ini mengubah kolom kategorikal (`Category` dan `City`) menjadi angka menggunakan `LabelEncoder` dari scikit-learn.

**Tujuan:**  
Mempermudah pemrosesan data oleh algoritma machine learning yang biasanya membutuhkan input numerik, bukan teks.

"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
numerical_columns = ['Price', 'Rating']
available_numerical = [col for col in numerical_columns if col in tourism_with_id_clean.columns]

if available_numerical:
    normalized_cols = [f"{col}_Normalized" for col in available_numerical]
    tourism_with_id_clean[normalized_cols] = scaler.fit_transform(tourism_with_id_clean[available_numerical])
    print(f"Normalized columns: {normalized_cols}")

"""**Normalisasi Data Numerik dengan MinMaxScaler**

Kode ini melakukan normalisasi pada kolom numerik seperti `Price` dan `Rating` menggunakan `MinMaxScaler` dari scikit-learn.

**Tujuan:**  
Menskala nilai numerik ke rentang 0-1 agar model machine learning bekerja lebih efektif dan hasilnya tidak bias karena skala data yang berbeda-beda.

# Data Preparation
"""

# Create content-based features
content_features = tourism_with_id_clean.copy()

"""Menyalin data pada tourism_with_id_clean dan menyimpannya kedalam content_features, supaya data aslinya tidak rusak"""

# Popularity Score
if 'Rating_Normalized' in content_features.columns and 'Total_Ratings' in content_features.columns:
    content_features['Popularity_Score'] = (
        content_features['Rating_Normalized'] *
        np.log1p(content_features['Total_Ratings'])
    )
    print("Popularity_Score created")

"""**Membuat Fitur Popularity Score**

Kode ini membuat fitur baru `Popularity_Score`

**Tujuan:**  
Menyusun skor popularitas tempat wisata dengan mempertimbangkan kualitas rating dan seberapa ramah harga (budget friendly), untuk membantu menentukan tempat wisata yang menarik dan terjangkau bagi pengguna.

"""

# Price Category
if 'Price_Normalized' in content_features.columns:
    content_features['Price_Category'] = pd.cut(
        content_features['Price_Normalized'],
        bins=3,
        labels=['Low', 'Medium', 'High']
    ).astype('category').cat.codes
    print("Price_Category created")

"""**Membuat Fitur Price Category**

Kode ini mengelompokkan harga yang sudah dinormalisasi (`Price_Normalized`) ke dalam tiga kategori: Low, Medium, dan High, lalu mengubahnya menjadi kode kategori numerik.

**Tujuan:**  
Mengklasifikasikan tempat wisata berdasarkan tingkat harga untuk memudahkan analisis dan segmentasi harga.

"""

print(f"\nFINAL FEATURES SHAPE: {content_features.shape}")

"""**Mengecek Ukuran Data Fitur Akhir**

Kode ini menampilkan ukuran (jumlah baris dan kolom) dari dataframe `content_features` setelah semua proses pembuatan fitur selesai.

**Tujuan:**  
Memastikan data fitur sudah lengkap dan siap untuk tahap analisis atau modeling selanjutnya.

"""

#Menyimpan Data
# Save all processed data for collaborative filtering
tourism_with_id_clean.to_csv('tourism_processed.csv', index=False)
tourism_rating.to_csv('rating_processed.csv', index=False)
content_features.to_csv('content_features.csv', index=False)

"""**Menyimpan Data yang Sudah Diproses**

Kode ini menyimpan tiga dataset yang sudah dibersihkan dan diproses ke dalam file CSV:

- `tourism_processed.csv` — data wisata dengan informasi lengkap dan bersih  
- `rating_processed.csv` — data rating dari user  
- `content_features.csv` — data fitur yang sudah diolah untuk analisis lebih lanjut

**Tujuan:**  
Memudahkan penggunaan data yang sudah siap pakai untuk analisis, pemodelan, atau kolaborasi tanpa harus mengulang proses pembersihan dan transformasi data.

"""

# Save encoders and scalers for collaborative filtering
import pickle

with open('encoders.pkl', 'wb') as f:
    pickle.dump(encoders, f)

with open('scaler.pkl', 'wb') as f:
    pickle.dump(scaler, f)

"""**Menyimpan Encoder dan Scaler**

Kode ini menggunakan `pickle` untuk menyimpan objek:

- `encoders.pkl` berisi encoder (LabelEncoder) yang sudah dilatih untuk fitur kategori seperti 'Category' dan 'City'.
- `scaler.pkl` berisi objek scaler (MinMaxScaler) yang digunakan untuk normalisasi fitur numerik.

**Tujuan:**  
Agar proses encoding dan normalisasi dapat digunakan ulang saat memproses data baru atau saat penerapan model, memastikan konsistensi transformasi data di masa depan.

# Modelling

### Content Base Filtering
"""

# Select features for similarity calculation
feature_columns = []
potential_features = [
    'Category_Encoded', 'City_Encoded', 'Price_Normalized',
    'Rating_Normalized',
    'Popularity_Score', 'Price_Category'
]

"""**Pemilihan Fitur untuk Perhitungan Similarity**

- `feature_columns`: Variabel kosong yang akan diisi dengan fitur-fitur yang digunakan untuk menghitung kemiripan antar tempat wisata.
- `potential_features`: Daftar fitur yang berpotensi dipakai, meliputi encoding kategori dan kota, fitur numerik yang sudah dinormalisasi, serta fitur turunan seperti Popularity_Score, dan Price_Category.

**Tujuan:**  
Memilih fitur relevan untuk analisis similarity atau rekomendasi tempat wisata berbasis konten agar model dapat mengenali kemiripan antar objek dengan lebih baik.

"""

# Only use available features
for col in potential_features:
    if col in content_features.columns:
        feature_columns.append(col)

print(f"FEATURES FOR SIMILARITY: {feature_columns}")

"""**Seleksi Fitur yang Tersedia**

- Melakukan pengecekan fitur `potential_features` satu per satu.
- Jika fitur tersebut ada di `content_features`, maka dimasukkan ke dalam `feature_columns`.
- Menampilkan daftar fitur final yang akan dipakai untuk perhitungan similarity.

**Tujuan:**  
Memastikan hanya fitur yang benar-benar ada di dataset yang digunakan untuk menghindari error dan menjaga kualitas analisis similarity.

"""

# Create feature matrix
feature_matrix = content_features[feature_columns].values
print(f"Feature matrix shape: {feature_matrix.shape}")

"""**Membuat Matriks Fitur**

- Membuat matriks fitur (`feature_matrix`) dengan mengambil kolom-kolom yang sudah dipilih (`feature_columns`) dari dataset `content_features`.
- Menampilkan bentuk (`shape`) matriks fitur tersebut.

**Tujuan:**  
Menyiapkan data numerik dalam bentuk matriks yang siap digunakan untuk perhitungan similarity atau algoritma machine learning selanjutnya.

"""

from sklearn.metrics.pairwise import cosine_similarity
# Calculate similarity matrix
print("Computing cosine similarity...")
similarity_matrix = cosine_similarity(feature_matrix)
print(f"Similarity matrix created: {similarity_matrix.shape}")

"""**Menghitung Matriks Similarity dengan Cosine Similarity**

- Menggunakan `cosine_similarity` dari sklearn untuk menghitung kemiripan antar objek berdasarkan matriks fitur.
- Menampilkan ukuran matriks similarity yang dihasilkan.

**Tujuan:**  
Membuat matriks similarity yang menunjukkan seberapa mirip tiap objek wisata satu dengan lainnya berdasarkan fitur numerik yang sudah dipilih. Matriks ini penting untuk rekomendasi berbasis content filtering.

### Evalusi Model
"""

print("\nRECOMMENDATION FUNCTIONS")
print("-" * 30)

def get_content_recommendations(place_name, n=5, show=True):
    try:
        # Pastikan kolom tersedia
        if 'Place_Name' not in content_features.columns:
            print("Kolom 'Place_Name' tidak ditemukan.")
            return None

        # Ambil indeks tempat
        idx = content_features.index[content_features['Place_Name'] == place_name].tolist()
        if not idx:
            print(f" '{place_name}' tidak ditemukan.")
            show_available_places()
            return None
        idx = idx[0]

        # Hitung skor kemiripan
        sim_scores = list(enumerate(similarity_matrix[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:n+1]

        # Ambil data rekomendasi
        top_idx = [i for i, _ in sim_scores]
        recommendations = content_features.loc[top_idx, ['Place_Name']].copy()
        recommendations['Similarity_Score'] = [s for _, s in sim_scores]

        # Tambahkan kolom opsional jika ada
        for col in ['Category', 'City', 'Rating_Normalized', 'Price_Normalized']:
            if col in content_features.columns:
                recommendations[col] = content_features.loc[top_idx, col]

        # Tampilkan
        if show:
            print(f"\nREKOMENDASI UNTUK: '{place_name}'")
            print("=" * 50)
            for i, row in recommendations.iterrows():
                print(f"{i+1}. {row['Place_Name']} (Similarity: {row['Similarity_Score']:.3f})")
                for col in ['Category', 'City', 'Rating_Normalized', 'Price_Normalized']:
                    if col in row:
                        print(f"   {col.replace('_', ' ')}: {row[col]}")
                print("-" * 40)

        return recommendations

    except Exception as e:
        print(f"Error: {e}")
        return None

def show_available_places(n=20):
    if 'Place_Name' in content_features.columns:
        places = content_features['Place_Name'].head(n)
        print(f"\nAvailable Places (first {n}):")
        for i, name in enumerate(places, 1):
            print(f"{i:2d}. {name}")
        print(f"... and {len(content_features) - n} more (Total: {len(content_features)})")
    else:
        print(" Kolom 'Place_Name' tidak ditemukan.")

"""**Fungsi Rekomendasi Tempat Wisata Berdasarkan Content Similarity**

- `get_content_recommendations(place_name, n=5, show=True)`  
  Fungsi utama untuk mendapatkan rekomendasi tempat wisata serupa berdasarkan nama tempat yang diberikan.  
  - Memeriksa keberadaan kolom `Place_Name`.  
  - Mencari indeks tempat input.  
  - Mengurutkan similarity score dan mengambil top-N rekomendasi.  
  - Menampilkan hasil rekomendasi dengan skor similarity dan info opsional (kategori, kota, rating, harga).  
  - Menangani error dan kasus tempat tidak ditemukan.

- `show_available_places(n=20)`  
  Fungsi bantu untuk menampilkan daftar tempat wisata yang tersedia (default 20 tempat pertama).

---

**Kegunaan:**  
Mempermudah pencarian rekomendasi tempat wisata yang mirip secara fitur, meningkatkan pengalaman pengguna dalam menemukan destinasi baru sesuai preferensi.


"""

print("\nTESTING CONTENT-BASED RECOMMENDATIONS")
print("-" * 30)


# Coba rekomendasi untuk satu tempat
if 'Place_Name' in content_features.columns and not content_features.empty:
    test_place = content_features['Place_Name'].iloc[7]
    print(f"\nTesting with: '{test_place}'")

    recommendations = get_content_recommendations(test_place, n=5)

    if recommendations is not None:
        print("\nRECOMMENDATION ANALYSIS:")
        print(f"- Avg. Similarity: {recommendations['Similarity_Score'].mean():.3f}")

        for col in ['Category', 'City']:
            if col in recommendations.columns:
                print(f"- {col} diversity: {recommendations[col].nunique()} unique")

"""**Penjelasan Kode Testing Content-Based Recommendations**

- *Pengujian Rekomendasi untuk Tempat Wisata Tertentu*  
  Memilih satu tempat wisata (`test_place`) dari data sebagai contoh untuk diberikan rekomendasi.

- *Fungsi `get_content_recommendations(test_place, n=5)`*  
  Menghasilkan 5 rekomendasi tempat wisata paling mirip berdasarkan fitur konten (kategori, kota, rating, harga, dll).

- *Output Rekomendasi*  
  Menampilkan daftar tempat wisata yang direkomendasikan beserta skor kemiripan dan beberapa atribut terkait.

- *Analisis Rekomendasi*  
  Menghitung rata-rata skor kemiripan dari rekomendasi dan menilai keberagaman kategori dan kota untuk melihat variasi rekomendasi.

---

**Tujuan**

Kode ini bertujuan untuk menguji dan menampilkan hasil rekomendasi berbasis konten agar dapat melihat efektivitas model dalam merekomendasikan tempat wisata yang serupa dan relevan secara cepat dan praktis.

"""